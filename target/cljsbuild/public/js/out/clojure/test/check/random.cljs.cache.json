["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ ","~$prototype",["^ ","~$valueOf",["^ "]]],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:imports",null,"~:requires",["^ ","~$doubles","~$clojure.test.check.random.doubles","^C","^C","~$longs","~$clojure.test.check.random.longs","^E","^E"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^:","^E","^;","^E","^<","^E","~$*","^E","^=","^E","~$+","^E"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-1","~:file","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","~:line",71,"~:column",1,"~:end-line",71,"~:end-column",33,"~:private",true,"~:meta",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",71,"^M",16,"^N",71,"^O",33,"^P",true],"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",123,"^M",7,"^N",123,"^O",39,"~:arglists",["~#list",["~$quote",["^W",[["~$seed"]]]]]],"^>","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",39,"~:method-params",["^W",[["^Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^M",1,"^L",123,"^N",123,"~:max-fixed-arity",1,"~:fn-var",true,"^V",["^W",["^X",["^W",[["^Y"]]]]]],"~$rand-long",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",20,"^M",4,"^N",20,"^O",13,"~:protocol","~$clojure.test.check.random/IRandom","~:doc","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["~$rng"]]]]]],"^16","^17","^>","~$clojure.test.check.random/rand-long","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",13,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",20,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",62,"^M",17,"^N",62,"^O",23,"^P",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"^P",true,"^>","~$clojure.test.check.random/mix-64","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",23,"^10",["^W",[["~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",62,"^N",62,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"~$golden-gamma",["^ ","^>","~$clojure.test.check.random/golden-gamma","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",120,"^M",1,"^N",120,"^O",28,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",120,"^M",16,"^N",120,"^O",28,"^P",true],"^R","^S"],"~$mix-gamma-const-2",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-2","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",72,"^M",1,"^N",72,"^O",33,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",72,"^M",16,"^N",72,"^O",33,"^P",true],"^R","^S"],"~$mix-64-const-2",["^ ","^>","~$clojure.test.check.random/mix-64-const-2","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",60,"^M",1,"^N",60,"^O",30,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",60,"^M",16,"^N",60,"^O",30,"^P",true],"^R","^S"],"~$bxoubsr",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",54,"^M",17,"^N",54,"^O",24,"^P",true,"^V",["^W",["^X",["^W",[["~$x","~$n"]]]]],"^18","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^P",true,"^>","~$clojure.test.check.random/bxoubsr","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",24,"^10",["^W",[["~$x","~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",54,"^N",54,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["~$x","~$n"]]]]],"^18","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",140,"^M",7,"^N",140,"^O",18,"^V",["^W",["^X",["^W",[[],["^Y"]]]]],"^18","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^[",false,"^13",1,"^10",["^W",[[],["^Y"]]],"^V",["^W",[[],["^Y"]]],"^12",["^W",[null,null]]]],"^>","~$clojure.test.check.random/make-random","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",18,"^1F",["^ ","^[",false,"^13",1,"^10",["^W",[[],["^Y"]]],"^V",["^W",[[],["^Y"]]],"^12",["^W",[null,null]]],"^10",["^W",[[],["^Y"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",140,"^N",140,"^13",1,"^14",true,"^V",["^W",[[],["^Y"]]],"^18","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",75,"^M",17,"^N",75,"^O",26,"^P",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"^P",true,"^>","~$clojure.test.check.random/mix-gamma","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",26,"^10",["^W",[["~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",75,"^N",75,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^>","~$clojure.test.check.random/mix-gamma-const-3","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",73,"^M",1,"^N",73,"^O",33,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",73,"^M",16,"^N",73,"^O",33,"^P",true],"^R","^S"],"~$split-n",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",37,"^M",4,"^N",37,"^O",11,"^16","^17","^18","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19","~$n"]]]]]],"^16","^17","^>","~$clojure.test.check.random/split-n","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",11,"^10",["^W",[["^19","~$n"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",37,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["^19","~$n"]]]]],"^18","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^>","~$clojure.test.check.random/next-rng","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",130,"^M",1,"^N",130,"^O",24,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",130,"^M",16,"^N",130,"^O",24,"^P",true],"^R","~$function"],"~$hex-long",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",49,"^M",17,"^N",49,"^O",25,"^P",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^18","Helper for defining constants."],"^P",true,"^>","~$clojure.test.check.random/hex-long","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",25,"^10",["^W",[["~$s"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",49,"^N",49,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["~$s"]]]]],"^18","Helper for defining constants."],"~$rand-double",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",25,"^M",4,"^N",25,"^O",15,"^16","^17","^18","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19"]]]]]],"^16","^17","^>","~$clojure.test.check.random/rand-double","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",15,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",25,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^>","~$clojure.test.check.random/mix-64-const-1","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",59,"^M",1,"^N",59,"^O",30,"^P",true,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",59,"^M",16,"^N",59,"^O",30,"^P",true],"^R","^S"],"~$split",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",31,"^M",4,"^N",31,"^O",9,"^16","^17","^18","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^V",["^W",["^X",["^W",[["^19"]]]]]],"^16","^17","^>","~$clojure.test.check.random/split","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",9,"^10",["^W",[["^19"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^L",19,"^N",31,"^13",1,"^14",true,"^V",["^W",["^X",["^W",[["^19"]]]]],"^18","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^9",["^17"]],"^>","~$clojure.test.check.random/JavaUtilSplittableRandom","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",34,"~:type",true,"^M",10,"^L",91,"~:record",false,"^N",91,"~:skip-protocol-flag",null],"~$IRandom",["^ ","^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",19,"^M",14,"^N",19,"^O",21,"^18",null,"~:protocol-symbol",true,"~:jsdoc",["^W",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^15",[["^19"]],"^1S",[["^19"]],"^1W",[["^19"]],"^1L",[["^19","~$n"]]]]],"^25",true,"^>","^17","^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",21,"^M",1,"^L",19,"^27",["^ ","^28",["^ ","^15",[["^19"]],"^1S",[["^19"]],"^1W",[["^19"]],"^1L",[["^19","~$n"]]]],"~:info",null,"^N",19,"^R","^S","~:impls",["^9",["^20"]],"^18",null,"^26",["^W",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^U",null,"^Q",["^ ","^K","/Users/ezekills/Git/clotalk/target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^L",91,"^M",10,"^N",91,"^O",34,"^1[",["^9",["^17"]],"^23",null,"~:factory","~:positional","^V",["^W",["^X",["^W",[["~$gamma","~$state"]]]]]],"^1[",["^9",["^17"]],"^>","~$clojure.test.check.random/->JavaUtilSplittableRandom","^[",false,"^K","target/cljsbuild/public/js/out/clojure/test/check/random.cljs","^O",34,"^10",["^W",[["^2>","^2?"]]],"^11",null,"^12",["^W",[null,null]],"^M",1,"^2<","^2=","^L",91,"^N",91,"^13",2,"^14",true,"^V",["^W",["^X",["^W",[["^2>","^2?"]]]]],"^23",null]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:returned","~:state","~:seed","^2?","^2>"]],"~:order",["^2>","^2?","^2G","^2F","^2E"]],"^18","Purely functional and splittable pseudo-random number generators."]